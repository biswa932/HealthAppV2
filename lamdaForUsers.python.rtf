{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue255;\red45\green45\blue45;
\red0\green0\blue0;\red144\green1\blue18;\red15\green112\blue1;\red0\green0\blue255;\red101\green76\blue29;
\red0\green0\blue109;\red19\green118\blue70;\red32\green108\blue135;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c100000;\cssrgb\c23137\c23137\c23137;
\cssrgb\c0\c0\c0;\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c50196\c0;\cssrgb\c0\c0\c100000;\cssrgb\c47451\c36863\c14902;
\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;\cssrgb\c14902\c49804\c60000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  json\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  boto3\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  os\cb1 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  boto3.dynamodb.conditions \cf2 \strokec2 import\cf4 \strokec4  Key\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 dynamodb \strokec5 =\strokec4  boto3.resource(\cf6 \strokec6 'dynamodb'\cf4 \strokec4 )\cb1 \
\cb3 table \strokec5 =\strokec4  dynamodb.Table(\cf6 \strokec6 'Users'\cf4 \strokec4 )  \cf7 \strokec7 # Replace with your actual table name\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 def\cf4 \strokec4  \cf9 \strokec9 lambda_handler\cf4 \strokec4 (\cf10 \strokec10 event\cf4 \strokec4 , \cf10 \strokec10 context\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf9 \strokec9 print\cf4 \strokec4 (\cf6 \strokec6 "Received event:"\cf4 \strokec4 , json.dumps(event))  \cf7 \strokec7 # Helpful for debugging in CloudWatch\cf4 \cb1 \strokec4 \
\
\cb3     \cf7 \strokec7 # Detect HTTP method based on source (Lambda Test or API Gateway)\cf4 \cb1 \strokec4 \
\cb3     method \strokec5 =\strokec4  event.get(\cf6 \strokec6 'httpMethod'\cf4 \strokec4 ) \cf8 \strokec8 or\cf4 \strokec4  event.get(\cf6 \strokec6 'requestContext'\cf4 \strokec4 , \{\}).get(\cf6 \strokec6 'http'\cf4 \strokec4 , \{\}).get(\cf6 \strokec6 'method'\cf4 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  method \strokec5 ==\strokec4  \cf6 \strokec6 'GET'\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  get_users(event)\cb1 \
\cb3     \cf2 \strokec2 elif\cf4 \strokec4  method \strokec5 ==\strokec4  \cf6 \strokec6 'POST'\cf4 \strokec4 :\cb1 \
\cb3         body \strokec5 =\strokec4  json.loads(event.get(\cf6 \strokec6 'body'\cf4 \strokec4 , \cf6 \strokec6 '\cf8 \strokec8 \{\}\cf6 \strokec6 '\cf4 \strokec4 ))\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  create_user(body)\cb1 \
\cb3     \cf2 \strokec2 elif\cf4 \strokec4  method \strokec5 ==\strokec4  \cf6 \strokec6 'PUT'\cf4 \strokec4 :\cb1 \
\cb3         body \strokec5 =\strokec4  json.loads(event.get(\cf6 \strokec6 'body'\cf4 \strokec4 , \cf6 \strokec6 '\cf8 \strokec8 \{\}\cf6 \strokec6 '\cf4 \strokec4 ))\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  update_user(body)\cb1 \
\cb3     \cf2 \strokec2 elif\cf4 \strokec4  method \strokec5 ==\strokec4  \cf6 \strokec6 'DELETE'\cf4 \strokec4 :\cb1 \
\cb3         params \strokec5 =\strokec4  event.get(\cf6 \strokec6 'queryStringParameters'\cf4 \strokec4 , \{\})\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  delete_user(params.get(\cf6 \strokec6 'email'\cf4 \strokec4 ))\cb1 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 400\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf6 \strokec6 'Unsupported method'\cf4 \strokec4 \})\cb1 \
\cb3         \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 def\cf4 \strokec4  \cf9 \strokec9 create_user\cf4 \strokec4 (\cf10 \strokec10 body\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3         required_fields \strokec5 =\strokec4  [\cf6 \strokec6 "email"\cf4 \strokec4 , \cf6 \strokec6 "name"\cf4 \strokec4 , \cf6 \strokec6 "dob"\cf4 \strokec4 , \cf6 \strokec6 "gender"\cf4 \strokec4 , \cf6 \strokec6 "weight"\cf4 \strokec4 , \cf6 \strokec6 "height"\cf4 \strokec4 ]\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 # Check if all required fields are present in the request body\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  \cf9 \strokec9 all\cf4 \strokec4 (field \cf2 \strokec2 in\cf4 \strokec4  body \cf2 \strokec2 for\cf4 \strokec4  field \cf2 \strokec2 in\cf4 \strokec4  required_fields):\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 400\cf4 \strokec4 ,\cb1 \
\cb3                 \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf6 \strokec6 'Missing required user fields'\cf4 \strokec4 \})\cb1 \
\cb3             \}\cb1 \
\
\cb3         \cf7 \strokec7 # Insert the user data into the DynamoDB table\cf4 \cb1 \strokec4 \
\cb3         table.put_item(\cf10 \strokec10 Item\cf4 \strokec5 =\strokec4 body)\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 201\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'message'\cf4 \strokec4 : \cf6 \strokec6 'User created successfully'\cf4 \strokec4 \})\cb1 \
\cb3         \}\cb1 \
\cb3     \cf2 \strokec2 except\cf4 \strokec4  \cf12 \strokec12 Exception\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  e:\cb1 \
\cb3         \cf9 \strokec9 print\cf4 \strokec4 (\cf6 \strokec6 "Error creating user:"\cf4 \strokec4 , \cf12 \strokec12 str\cf4 \strokec4 (e))\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 500\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf12 \strokec12 str\cf4 \strokec4 (e)\})\cb1 \
\cb3         \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 def\cf4 \strokec4  \cf9 \strokec9 get_users\cf4 \strokec4 (\cf10 \strokec10 event\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3         email \strokec5 =\strokec4  event.get(\cf6 \strokec6 "queryStringParameters"\cf4 \strokec4 , \{\}).get(\cf6 \strokec6 "email"\cf4 \strokec4 )\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 # If email is not provided, return error\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  email:\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 400\cf4 \strokec4 ,\cb1 \
\cb3                 \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf6 \strokec6 'Email is required'\cf4 \strokec4 \})\cb1 \
\cb3             \}\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 # Fetch user from DynamoDB based on email\cf4 \cb1 \strokec4 \
\cb3         response \strokec5 =\strokec4  table.get_item(\cf10 \strokec10 Key\cf4 \strokec5 =\strokec4 \{\cf6 \strokec6 "email"\cf4 \strokec4 : email\})\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 "Item"\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  \cf8 \strokec8 in\cf4 \strokec4  response:\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 404\cf4 \strokec4 ,\cb1 \
\cb3                 \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf6 \strokec6 'User not found'\cf4 \strokec4 \})\cb1 \
\cb3             \}\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 # Return the found user data\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 200\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(response[\cf6 \strokec6 'Item'\cf4 \strokec4 ])\cb1 \
\cb3         \}\cb1 \
\cb3     \cf2 \strokec2 except\cf4 \strokec4  \cf12 \strokec12 Exception\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  e:\cb1 \
\cb3         \cf9 \strokec9 print\cf4 \strokec4 (\cf6 \strokec6 "Error fetching user:"\cf4 \strokec4 , \cf12 \strokec12 str\cf4 \strokec4 (e))\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 500\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf12 \strokec12 str\cf4 \strokec4 (e)\})\cb1 \
\cb3         \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 def\cf4 \strokec4  \cf9 \strokec9 update_user\cf4 \strokec4 (\cf10 \strokec10 body\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3         email \strokec5 =\strokec4  body.get(\cf6 \strokec6 "email"\cf4 \strokec4 )\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 # Ensure email is provided for update\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  email:\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 400\cf4 \strokec4 ,\cb1 \
\cb3                 \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf6 \strokec6 'Email is required'\cf4 \strokec4 \})\cb1 \
\cb3             \}\cb1 \
\cb3         \cb1 \
\cb3         \cf7 \strokec7 # Prepare update expression and attribute values\cf4 \cb1 \strokec4 \
\cb3         update_expression \strokec5 =\strokec4  \cf6 \strokec6 "SET "\cf4 \cb1 \strokec4 \
\cb3         expression_values \strokec5 =\strokec4  \{\}\cb1 \
\cb3         \cf2 \strokec2 for\cf4 \strokec4  key \cf2 \strokec2 in\cf4 \strokec4  [\cf6 \strokec6 "name"\cf4 \strokec4 , \cf6 \strokec6 "dob"\cf4 \strokec4 , \cf6 \strokec6 "gender"\cf4 \strokec4 , \cf6 \strokec6 "weight"\cf4 \strokec4 , \cf6 \strokec6 "height"\cf4 \strokec4 ]:\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  key \cf8 \strokec8 in\cf4 \strokec4  body:\cb1 \
\cb3                 update_expression \strokec5 +=\strokec4  \cf8 \strokec8 f\cf6 \strokec6 "\cf8 \strokec8 \{\cf4 \strokec4 key\cf8 \strokec8 \}\cf6 \strokec6  = :\cf8 \strokec8 \{\cf4 \strokec4 key\cf8 \strokec8 \}\cf6 \strokec6 , "\cf4 \cb1 \strokec4 \
\cb3                 expression_values[\cf8 \strokec8 f\cf6 \strokec6 ":\cf8 \strokec8 \{\cf4 \strokec4 key\cf8 \strokec8 \}\cf6 \strokec6 "\cf4 \strokec4 ] \strokec5 =\strokec4  body[key]\cb1 \
\
\cb3         \cf7 \strokec7 # If no fields are provided to update, return an error\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  expression_values:\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 400\cf4 \strokec4 ,\cb1 \
\cb3                 \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf6 \strokec6 'Nothing to update'\cf4 \strokec4 \})\cb1 \
\cb3             \}\cb1 \
\
\cb3         update_expression \strokec5 =\strokec4  update_expression.rstrip(\cf6 \strokec6 ", "\cf4 \strokec4 )\cb1 \
\
\cb3         \cf7 \strokec7 # Update the user in DynamoDB\cf4 \cb1 \strokec4 \
\cb3         table.update_item(\cb1 \
\cb3             \cf10 \strokec10 Key\cf4 \strokec5 =\strokec4 \{\cf6 \strokec6 "email"\cf4 \strokec4 : email\},\cb1 \
\cb3             \cf10 \strokec10 UpdateExpression\cf4 \strokec5 =\strokec4 update_expression,\cb1 \
\cb3             \cf10 \strokec10 ExpressionAttributeValues\cf4 \strokec5 =\strokec4 expression_values\cb1 \
\cb3         )\cb1 \
\
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 200\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'message'\cf4 \strokec4 : \cf6 \strokec6 'User updated successfully'\cf4 \strokec4 \})\cb1 \
\cb3         \}\cb1 \
\cb3     \cf2 \strokec2 except\cf4 \strokec4  \cf12 \strokec12 Exception\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  e:\cb1 \
\cb3         \cf9 \strokec9 print\cf4 \strokec4 (\cf6 \strokec6 "Error updating user:"\cf4 \strokec4 , \cf12 \strokec12 str\cf4 \strokec4 (e))\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 500\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf12 \strokec12 str\cf4 \strokec4 (e)\})\cb1 \
\cb3         \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 def\cf4 \strokec4  \cf9 \strokec9 delete_user\cf4 \strokec4 (\cf10 \strokec10 email\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 not\cf4 \strokec4  email:\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 400\cf4 \strokec4 ,\cb1 \
\cb3                 \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf6 \strokec6 'Email is required'\cf4 \strokec4 \})\cb1 \
\cb3             \}\cb1 \
\
\cb3         \cf7 \strokec7 # Delete the user from DynamoDB\cf4 \cb1 \strokec4 \
\cb3         table.delete_item(\cf10 \strokec10 Key\cf4 \strokec5 =\strokec4 \{\cf6 \strokec6 "email"\cf4 \strokec4 : email\})\cb1 \
\
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 200\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'message'\cf4 \strokec4 : \cf6 \strokec6 'User deleted successfully'\cf4 \strokec4 \})\cb1 \
\cb3         \}\cb1 \
\cb3     \cf2 \strokec2 except\cf4 \strokec4  \cf12 \strokec12 Exception\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  e:\cb1 \
\cb3         \cf9 \strokec9 print\cf4 \strokec4 (\cf6 \strokec6 "Error deleting user:"\cf4 \strokec4 , \cf12 \strokec12 str\cf4 \strokec4 (e))\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3             \cf6 \strokec6 'statusCode'\cf4 \strokec4 : \cf11 \strokec11 500\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 'body'\cf4 \strokec4 : json.dumps(\{\cf6 \strokec6 'error'\cf4 \strokec4 : \cf12 \strokec12 str\cf4 \strokec4 (e)\})\cb1 \
\cb3         \}\cb1 \
\
}